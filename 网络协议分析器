import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from scapy.all import *
from scapy.layers.l2 import Ether, ARP
from scapy.layers.inet import IP, TCP, UDP, ICMP
from scapy.error import Scapy_Exception
import threading
import re


class ProtocolReceiver:
    def __init__(self, master):
        self.master = master
        master.title("协议分析工具 v7.0")
        self.sniffing = False

        # 接收控制区
        control_frame = ttk.LabelFrame(master, text="捕获控制")
        control_frame.grid(row=0, column=0, padx=10, pady=5, sticky="ew")

        ttk.Label(control_frame, text="BPF过滤器:").pack(side="left")
        self.filter_entry = ttk.Entry(control_frame, width=30)
        self.filter_entry.insert(0, "ip or tcp or udp or icmp")
        self.filter_entry.pack(side="left", padx=5)

        # 删除帮助按钮相关代码
        # help_btn = ttk.Button(control_frame, text="?", width=2, command=self.show_filter_help)
        # help_btn.pack(side="left", padx=2)

        self.start_btn = ttk.Button(control_frame, text="开始捕获", command=self.toggle_sniffing, width=10)
        self.start_btn.pack(side="right", padx=5)

        clear_btn = ttk.Button(control_frame, text="清除日志", command=self.clear_log_area, width=10)
        clear_btn.pack(side="right")

        # 日志显示区
        self.log_area = scrolledtext.ScrolledText(
            master,
            width=80,
            height=25,
            wrap=tk.WORD
        )
        self.log_area.grid(row=1, column=0, padx=10, pady=5)
        self.log_area.tag_config("error", foreground="red")
        self.log_area.tag_config("separator", foreground="gray")

    def toggle_sniffing(self):
        if not self.sniffing:
            self.sniffing = True
            self.start_btn.config(text="停止捕获")
            filter_str = self.filter_entry.get().strip() or "ip or tcp or udp or icmp"
            threading.Thread(target=self.sniff_packets, args=(filter_str,), daemon=True).start()
        else:
            self.sniffing = False
            self.start_btn.config(text="开始捕获")

    def sniff_packets(self, filter_str):
        try:
            sniff(
                prn=self.analyze_packet,
                filter=filter_str,
                stop_filter=lambda x: not self.sniffing,
                store=0
            )
        except Scapy_Exception as e:
            self.log(f"过滤错误: {str(e)}", "error")
        except Exception as e:
            self.log(f"捕获错误: {str(e)}", "error")
        finally:
            self.sniffing = False
            self.start_btn.config(text="开始捕获")

    def analyze_packet(self, packet):
        analysis = []
        if Ether in packet:
            analysis.append(f"[MAC] 源: {packet[Ether].src} → 目标: {packet[Ether].dst}")

        if ARP in packet:
            analysis.append(f"[ARP] 操作: {packet[ARP].op} 发送端: {packet[ARP].psrc} 目标: {packet[ARP].pdst}")

        if IP in packet:
            ip = packet[IP]
            analysis.append(f"[IP] 版本: {ip.version} {ip.src} → {ip.dst} 协议号: {ip.proto}")

            if TCP in ip:
                tcp = ip[TCP]
                analysis.append(f"[TCP] 端口: {tcp.sport} → {tcp.dport} 标志: {tcp.flags}")

            elif UDP in ip:
                udp = ip[UDP]
                analysis.append(f"[UDP] 端口: {udp.sport} → {udp.dport} 长度: {udp.len}")

            elif ICMP in ip:
                icmp = ip[ICMP]
                analysis.append(f"[ICMP] 类型: {icmp.type} 代码: {icmp.code}")

        if analysis:
            self.log("-" * 80, "separator")
            self.log("\n".join(analysis))

    def log(self, message, tag=None):
        self.log_area.insert(tk.END, message + "\n", tag)
        self.log_area.see(tk.END)

    # 删除帮助方法
    # def show_filter_help(self):
    #     help_text = """BPF过滤器语法示例：
    #     - 协议过滤: tcp, udp, icmp, arp
    #     - IP地址过滤: host 192.168.1.1, dst net 10.0.0.0/24
    #     - 端口过滤: port 80, src port 1234
    #     - 组合条件: tcp and (port 80 or port 443)
    #     - 排除条件: not arp"""
    #     messagebox.showinfo("过滤器帮助", help_text)

    def clear_log_area(self):
        self.log_area.delete(1.0, tk.END)


if __name__ == "__main__":
    root = tk.Tk()
    app = ProtocolReceiver(root)
    root.mainloop()
